<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Yixiaohan.github.io</id>
    <title>江歌的博客</title>
    <updated>2024-07-30T12:43:58.500Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Yixiaohan.github.io"/>
    <link rel="self" href="https://Yixiaohan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Yixiaohan.github.io/images/avatar.png</logo>
    <icon>https://Yixiaohan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, 江歌的博客</rights>
    <entry>
        <title type="html"><![CDATA[新人成长训练营-成长方法论]]></title>
        <id>https://Yixiaohan.github.io/post/xin-ren-cheng-chang-fang-fa-lun/</id>
        <link href="https://Yixiaohan.github.io/post/xin-ren-cheng-chang-fang-fa-lun/">
        </link>
        <updated>2024-06-10T13:18:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="搜商元知识-最少必要知识">搜商(元知识、最少必要知识)</h2>
<blockquote>
<p>“搜商”英文缩写为SQ，顾名思义，就是一种与智商、情商相并列的人类智力因素。正是在这样一个处于搜索时代的实践先锋，对于“搜商”的洞悉更为深刻。<br>
百度百科:https://baike.baidu.com/item/%E6%90%9C%E5%95%86</p>
</blockquote>
<blockquote>
<p>SQ=M(s) X IQ X EQ，SQ=搜商，其中M(s)=Mind(sourcing)搜寻意识，IQ=智商，EQ=情商。此概念更多强调的是搜寻意识，而同时搜商也与智商和情商密切成正比，很好地给出了搜商与智商、情商的关系和区别。</p>
</blockquote>
<blockquote>
<p>另外一个搜商公式：SQ=K/T（C）{SQ=搜商，其中K=knowledge知识，T=time时间，C=搜商指数（社会平均知识获取能力）}</p>
</blockquote>
<p>现场互动问题：</p>
<ol>
<li>手机 4G、5G 网络下可以访问 Google 的人请举手</li>
<li>你使用过哪些 Google 搜索技巧？</li>
<li>使用过 Web Archive(互联网档案馆) 的人请举手</li>
<li>你使用过哪个 AI 工具？</li>
</ol>
<h3 id="必看资料">必看资料：</h3>
<ul>
<li>
<p><a href="https://support.google.com/websearch/answer/2466433">如何使用 Google 搜索 - 官方 Help</a></p>
</li>
<li>
<p><a href="https://letmegooglethat.com/">Let Me Google That For You</a></p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1M44y1i7Re">用搜索技巧解决95%的难题</a></p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1yw411F7J1">超级搜索技术，普通人变强的唯一外挂 | 全套宝藏实操秘技</a></p>
</li>
</ul>
<h2 id="提问的智慧">提问的智慧</h2>
<p>互动问题：大家在办公软件里搜索一下「测试环境还是线上环境」</p>
<p>所以，提问题时，尽量提供详细的信息，包括但不限于以下信息:</p>
<ul>
<li>环境(测试环境?还是线上环境?)</li>
<li>项目名</li>
<li>报错文字详细信息(方便后续有同学遇到同样问题时可以搜索到)</li>
<li>截图(一图胜万言)</li>
<li>其他信息:机器名、IP 地址等等</li>
</ul>
<h3 id="提问最佳实践">提问最佳实践</h3>
<p><strong>尽量在一个聊天框里</strong>描述完整问题(文字、图片、链接等等)，比如</p>
<blockquote>
<p>@易枭寒 线上 履约 报警，调用库存接口超时引起</p>
<p>stockBlockingClient.sale.serviceno =DB0000000001234,inoutType = out,销售库存响应response=data{result: true},消耗时间:8654</p>
<p>http://xxxx.kibana.pt.yyyy.com/app/discover#/? g=(filters:!(),refreshinterval</p>
<p>并且截图一张，红框标出报错信息。</p>
</blockquote>
<h3 id="必读资料">必读资料：</h3>
<ul>
<li>
<p><a href="https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md">提问的智慧</a></p>
</li>
<li>
<p><a href="https://coolshell.cn/articles/10804.html">X-Y PROBLEM - CoolShell</a></p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://Yixiaohan.github.io/post-images/1716020403149.jpeg" alt="" loading="lazy"></figure>
<h2 id="沟通">沟通</h2>
<p>不要问「<a href="https://nohello.net/zh-cn/">在吗</a>」，有事直接说就行，尽量在<strong>一个聊天框里</strong>描述完整问题，记得加上合适的空行</p>
<h3 id="沟通最佳实践">沟通最佳实践：</h3>
<p>一次完整的交流，至少要让对方知道：</p>
<ul>
<li>我是谁</li>
<li>因为什么事情</li>
<li>想要做什么</li>
<li>跟你有什么关系</li>
<li>需要你做什么</li>
<li>因此，无论哪种沟通方式，请先说明自己是谁（我是某某部门的某某某）。</li>
</ul>
<p>然后说你目前的处境（我这边接到了一个产品需求）。<br>
说明你想做什么（需要能够实现XXXX功能）。<br>
跟你有什么关系（但是目前平台不支持这种功能）。<br>
需要你做什么（想要咨询一下是否有其他方式能够实现，不行的话是否能约个时间聊一下新功能的开发）。</p>
<p>还有一些其他的杂七杂八的东西，比如打电话询问现在接电话是否方便，邮件里需要有抬头和签名，等等。</p>
<h2 id="做事方法论事前规划-事中执行-事后总结">做事方法论：(事前规划 --&gt;事中执行 --&gt;事后总结)</h2>
<figure data-type="image" tabindex="2"><img src="https://Yixiaohan.github.io/post-images/1716020694743.jpg" alt="" loading="lazy"></figure>
<h3 id="okr规划法">OKR规划法:</h3>
<p>未雨绸缪，规划先行</p>
<h3 id="3choice方案设计法">3Choice方案设计法:</h3>
<blockquote>
<p>1个方案容易出现思维狭隘的问题，2个方案容易出现选择困难的问题，所以说：1个方案是陷阱，2 个方案是困境，3个方案是选择</p>
</blockquote>
<h3 id="pdca执行法">PDCA执行法:</h3>
<blockquote>
<p>PDCA 执行法，就是把事情的执行过程分成四个环节:计划(Plan)、执行(Do)、检查(Check)和行动(Act）</p>
</blockquote>
<h3 id="5w根因分析法">5W根因分析法</h3>
<ul>
<li>
<p>案例:5w1h:我的学习、归纳方法(以学习 Maven 为例)<br>
<img src="https://Yixiaohan.github.io/post-images/1716020375186.png" alt="" loading="lazy"></p>
</li>
<li>
<p>案例：<a href="https://note.youdao.com/">5whys分析法在美团工程师中的实践</a></p>
</li>
</ul>
<h3 id="5s问题处理法">5S问题处理法:</h3>
<blockquote>
<p><strong>明确问题(Specify)、拆解问题(Split)、定位问题(Seek)、解决问题 (Solve)和落地行动(Sort)</strong><br>
<img src="https://Yixiaohan.github.io/post-images/1716021167679.jpg" alt="" loading="lazy"></p>
</blockquote>
<h3 id="4d总结法">4D总结法:</h3>
<blockquote>
<p>从<strong>结果、数据、技术和成长</strong>这 4 个维度(Dimension) 来整理自己的做事收获，从而涵盖事情的重点难点核心点</p>
</blockquote>
<h3 id="四线复盘法">四线复盘法:</h3>
<blockquote>
<p>四线复盘法是通过<strong>时间线、问题链、责任链和改进线</strong>这 4条不同的线索来展开复盘</p>
</blockquote>
<p>比如说，事故复盘有收集、整理、分类、集团全员分享吗？</p>
<ul>
<li>
<p>增加 RCA(Root Cause Analysis，根本原因分析)制度，对 Bug 的成因进行分析和标注，定时汇总并通告，让开发人员集体增长问题解决经验，减少同类问题多次出现的概率;</p>
</li>
<li>
<p>挖坑和踩雷(没踩过雷，没总结过，没传下去，就还会继续挖坑)目项目踩坑记录</p>
</li>
</ul>
<h3 id="金字塔汇报法">金字塔汇报法:</h3>
<ul>
<li>金字塔汇报法基于金字塔原理，包括4条基本原则:<strong>结论先行，自顶向下，归类分组和逻辑递进</strong></li>
<li>金字塔汇报法的标准汇报内容包括4个部分:<strong>总体结论，具体分析，关键事项和总结改进</strong></li>
<li>关键事项一般使用<strong>全局大图、演进路径和时间轴</strong>等技巧来汇报</li>
</ul>
<h2 id="业务业务还是业务">业务业务还是业务</h2>
<p>基本：有一定的产品和业务sense</p>
<p>认知格局：业务功能--&gt;业务领域 --&gt;业务战略</p>
<h2 id="研发三循环方法论">研发三循环方法论</h2>
<figure data-type="image" tabindex="3"><img src="https://Yixiaohan.github.io/post-images/1716020352404.jpg" alt="" loading="lazy"></figure>
<ul>
<li>
<p>提升研发能力，主要依靠经验积累，建立企业内部的<strong>知识库与传承体系</strong>（促进交流与协作，借助研发活力促进研发能力提升，也很重要）；</p>
</li>
<li>
<p>提升研发效率，主要依靠科学的数据分析，建立或引进一系列的研发工具，建立合理的<strong>流程与制度</strong>（通过提升研发人员能力，激发他们不断改进效率，也很重要）；</p>
</li>
<li>
<p>提升研发活力，主要靠多种社会化的<strong>沟通机制，促进分享与交流</strong>（给研发人员松绑，让他们有足够的空余时间，也很重要）。</p>
</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://Yixiaohan.github.io/post-images/1716179954532.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://Yixiaohan.github.io/post-images/1716179969481.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://Yixiaohan.github.io/post-images/1716179990659.png" alt="" loading="lazy"></figure>
<h2 id="影响力">影响力</h2>
<p>现场互动问题：<br>
有人知识 TIL 是什么意思吗？Today I Learned。</p>
<ul>
<li>
<p><a href="https://pythonhunter.org/episodes/ep23/">个人知识管理体系系列 - 输入篇</a></p>
</li>
<li>
<p><a href="https://pythonhunter.org/episodes/ep24">个人知识管理体系系列 - 内化篇</a></p>
</li>
<li>
<p><a href="https://pythonhunter.org/episodes/ep25">个人知识管理体系系列 - 输出篇</a></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[高可用与稳定性--稳定大于一切]]></title>
        <id>https://Yixiaohan.github.io/post/gao-ke-yong-yu-wen-ding-xing-wen-ding-da-yu-yi-qie/</id>
        <link href="https://Yixiaohan.github.io/post/gao-ke-yong-yu-wen-ding-xing-wen-ding-da-yu-yi-qie/">
        </link>
        <updated>2024-06-07T15:45:52.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>稳定性之于系统，就像健康之于人类，看起来重要不紧急，然而一旦失去，就追悔莫及。</p>
</blockquote>
<blockquote>
<p>稳定性是一切 0 前面的 1。</p>
</blockquote>
<p>名词解释：<a href="https://en.wikipedia.org/wiki/High_availability">维基百科中的High availability</a></p>
<p>考虑维度：</p>
<ul>
<li>基建、中间件的高可用（比如机房多活、数据库高可用等等）</li>
<li>业务服务的高可用</li>
</ul>
<p>SLA，服务等级协议（Service-Level Agreement，SLA）<br>
<img src="https://Yixiaohan.github.io/post-images/1721016869004.png" alt="" loading="lazy"></p>
<h2 id="1-事前防范">1. 事前防范</h2>
<h3 id="11-代码规约">1.1 代码规约</h3>
<ul>
<li>代码规约</li>
<li>数据库规约</li>
<li>Redis 规约</li>
<li>MQ 规约</li>
<li>其他规约</li>
</ul>
<p><strong>思考：有规约吗？有强制执行吗？不执行有惩罚吗？</strong></p>
<h3 id="12-变更管控">1.2 变更管控</h3>
<p><strong>思考：配置的变更有管控吗？</strong></p>
<h3 id="13-性能压测">1.3 性能压测</h3>
<ul>
<li>上线服务前考虑压测</li>
<li>大促活动前考虑压测</li>
</ul>
<h4 id="性能的测试指标主要有">性能的测试指标主要有：</h4>
<ul>
<li>响应时间：指应用执行一个操作需要的时间</li>
<li>并发数：指系统能够同时处理请求的数目</li>
<li>吞吐量：指单位时间内系统处理的请求数量</li>
<li>性能计数器：描述服务器或者操作系统性能的一些数据指标</li>
</ul>
<h4 id="性能测试方法">性能测试方法：</h4>
<ul>
<li>性能测试</li>
<li>负载测试</li>
<li>压力测试</li>
<li>稳定性测试</li>
</ul>
<h3 id="14-混沌工程">1.4 混沌工程</h3>
<h3 id="15-风险预案">1.5 风险预案</h3>
<ul>
<li>上线服务时技术方案考虑风险</li>
<li>大促活动前考虑风险</li>
<li>平常考虑风险预案</li>
</ul>
<h3 id="16-限流降级">1.6 限流降级</h3>
<h3 id="17-业务隔离">1.7 业务隔离</h3>
<h2 id="2-事中止血">2. 事中“止血”</h2>
<h3 id="21-监控告警">2.1 监控告警</h3>
<p>监控报警指标分为两种类型。</p>
<ol>
<li>系统要素指标：主要有 CPU、内存，和磁盘。</li>
<li>网络要素指标：主要有带宽、网络 I/O、CDN、DNS、安全策略、和负载策略。<br>
<img src="https://Yixiaohan.github.io/post-images/1721016507354.png" alt="" loading="lazy"><br>
<img src="https://Yixiaohan.github.io/post-images/1721016719850.png" alt="" loading="lazy"><br>
<img src="https://Yixiaohan.github.io/post-images/1721016733521.png" alt="" loading="lazy"><br>
<img src="https://Yixiaohan.github.io/post-images/1721016743277.png" alt="" loading="lazy"></li>
</ol>
<p>业务指标监控（比如订单量比昨天激增、退款数量、履约时效监控、发票开失败数量监控等等）</p>
<h3 id="22-异常巡检">2.2 异常巡检</h3>
<ul>
<li>巡检</li>
<li>值班</li>
</ul>
<h3 id="23-流量调度">2.3 流量调度</h3>
<h3 id="24-资损防控">2.4 资损防控</h3>
<h2 id="3-事后诊断">3. 事后诊断</h2>
<h3 id="31-系统诊断">3.1 系统诊断</h3>
<ul>
<li>CPU TOP 问题</li>
</ul>
<h3 id="32-jvm-诊断">3.2 JVM 诊断</h3>
<h4 id="321-异常诊断">3.2.1 异常诊断</h4>
<ul>
<li>
<p><a href="https://stabilityman.github.io/docs/diagnosis/jvm/exception/%E7%B3%BB%E7%BB%9F%E7%A8%B3%E5%AE%9A%E6%80%A7%E2%80%94%E2%80%94OutOfMemoryError%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html">OutOfMemoryError 常见原因及解决方法</a></p>
</li>
<li>
<p><a href="https://stabilityman.github.io/docs/diagnosis/jvm/exception/%E7%B3%BB%E7%BB%9F%E7%A8%B3%E5%AE%9A%E6%80%A7%E2%80%94%E2%80%94StackOverFlowError%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html">StackOverFlowError 常见原因及解决方法</a></p>
</li>
<li>
<p><a href="https://stabilityman.github.io/docs/diagnosis/jvm/exception/%E7%B3%BB%E7%BB%9F%E7%A8%B3%E5%AE%9A%E6%80%A7%E2%80%94%E2%80%94NoSuchMethodError%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html">NoSuchMethodError 常见原因及解决方法</a></p>
</li>
</ul>
<h4 id="322-内存诊断">3.2.2 内存诊断</h4>
<h4 id="323-线程诊断">3.2.3 线程诊断</h4>
<ul>
<li>线程池满</li>
<li>死锁</li>
</ul>
<h4 id="324-gc-诊断">3.2.4 GC 诊断</h4>
<p><a href="https://stabilityman.github.io/docs/diagnosis/jvm/gc/%E5%92%B1%E4%BB%AC%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E6%AC%A1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html">咱们从头到尾说一次Java垃圾回收</a></p>
<h3 id="33-组件诊断">3.3 组件诊断</h3>
<p>Dubbo 常见错误及解决方法<br>
Nacos 常见问题及解决方法<br>
Spring Boot 常见错误及解决方法</p>
<h3 id="34-在线诊断">3.4 在线诊断</h3>
<p>Arthas</p>
<h3 id="35-链路追踪">3.5 链路追踪</h3>
<h3 id="36-rootcause">3.6 RootCause</h3>
<p><strong>思考</strong>：有 RCA 事故复盘文档的沉淀吗？</p>
<h1 id="其他-1">其他 1：</h1>
<h2 id="高可用">【高可用】</h2>
<p>设计一个高可用架构需要考虑多个方面，包括可用性、可靠性、性能、扩展性、安全性等。下面是一些设计高可用架构的一般性原则和方法：</p>
<ol>
<li>
<p><strong>设计集群架构</strong>：采用多节点的集群架构可以提高系统的可用性和可靠性，从而避免单点故障导致系统不可用。</p>
</li>
<li>
<p><strong>采用分布式架构</strong>：采用分布式架构可以将系统的负载分散到多个节点上，从而提高系统的性能和可扩展性。</p>
</li>
<li>
<p><strong>实现故障转移和容错机制</strong>：通过使用冗余组件、备份数据等技术手段，可以实现故障转移和容错机制。例如，采用主从复制、备份、快速切换等技术来确保数据不丢失、系统快速恢复。</p>
</li>
<li>
<p><strong>可靠的服务器和网络</strong>：选择可靠的服务器和网络设备，以确保它们能够在故障时正常运行。可以采用多个服务器进行冗余备份，以实现故障转移和负载均衡。可以选择高可靠性网络设备和路由器，以避免网络故障。</p>
</li>
<li>
<p><strong>容灾和备份</strong>：需要设置容灾和备份计划，以确保在自然灾害、人为错误或其他紧急情况下能够快速恢复服务。可以使用云备份和容灾服务，以提高备份和恢复的效率和可靠性。</p>
</li>
<li>
<p><strong>设计监控和自动化工具</strong>：通过使用监控工具和自动化工具可以实现对系统的实时监控和自动化维护。例如，通过使用系统监控工具、自动化运维工具等来实现自动化运维、自动化扩容等功能，从而减少手动操作和人为错误。</p>
</li>
<li>
<p><strong>实现数据安全保护</strong>：通过采用多层次的安全策略来保护数据的安全性。例如，使用加密技术、防火墙、入侵检测等技术来保护系统和数据的安全。</p>
</li>
<li>
<p><strong>进行容量规划和性能优化</strong>：通过进行容量规划和性能优化，可以提高系统的性能和可扩展性。例如，通过使用缓存、调整配置参数、优化代码等技术手段来提高系统的性能和稳定性。</p>
</li>
<li>
<p><strong>设计自动化扩容和弹性伸缩</strong>：通过设计自动化扩容和弹性伸缩功能，可以根据业务需求和系统负载情况来自动调整系统资源。例如，通过使用自动化扩容工具和自动化弹性伸缩策略来实现系统资源的自动分配和调整。</p>
</li>
</ol>
<p>需要注意的是，设计高可用架构需要综合考虑业务需求、技术方案、资源投入等因素，同时需要不断进行优化和改进，以实现最优的性能和可用性。</p>
<h1 id="其他2高可用与稳定性">其他2：高可用与稳定性</h1>
<ul>
<li><strong>解耦</strong>：是软件设计的关键，历数软件技术进化史是软件开发解耦的过程，介绍了组件和面向对象的低耦合原则。</li>
<li><strong>隔离</strong>：是物理上的分割，常见如微服务技术方案，需建立在低耦合基础上才有意义。</li>
<li><strong>异步</strong>：基于隔离进一步解耦，主要通过消息队列实现，以提高系统可用性。</li>
<li><strong>备份</strong>：解决硬件故障下系统的可用性，与失效转移成对出现，数据库备份需同步数据。</li>
<li><strong>重试</strong>：修复单次调用故障，但服务须是幂等的，否则有风险。</li>
<li><strong>熔断</strong>：针对不稳定或宕机服务器，通过断路器阻断调用，有三种状态。</li>
<li><strong>补偿</strong>：故障发生后弥补错误或避免损失扩大，典型场景是事务补偿。</li>
<li><strong>限流</strong>：在高并发场景下对系统进行保护，丢弃部分用户请求保证系统可用。</li>
<li><strong>降级</strong>：保护系统高可用，关闭非核心但压力大的功能，如电商系统的确认收货。</li>
<li><strong>多活</strong>：异地多活建立多个数据中心，用户请求通过域名解析分发，需解决数据冲突和同步问题。</li>
<li><strong>高可用运维方案</strong>：包括自动化测试减少 Bug、自动化监控发现故障、预发布验证和灰度发布降低影响。</li>
</ul>
<h1 id="其他3高可用与稳定性">其他3：高可用与稳定性</h1>
<p>保障集群高可用，主要从三个方面来入手：</p>
<ul>
<li>事前较多的是做全链路压测评，估峰值容量；周期性的集群健康性检查；随机故障演练（服务、机器、组件）。</li>
<li>事中做异常报警（性能、业务指标、可用性）；快速的故障定位（单机故障、集群故障、IDC故障、组件异常、服务异常）；故障前后的系统变更收集。</li>
<li>事后重点做系统回滚；扩容、限流、熔断、降级；核武器兜底。</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://Yixiaohan.github.io/post-images/1721889013017.png" alt="" loading="lazy"></figure>
<p>https://tech.meituan.com/2018/11/22/instant-logistics-distributed-system-architecture.html</p>
<h1 id="其他4高可用与稳定性">其他4：高可用与稳定性</h1>
<h2 id="多副本">多副本</h2>
<h2 id="隔离-限流-熔断-降级">隔离、限流、熔断、降级</h2>
<ul>
<li>限流注意事项：限流返回给客户端的错误代码、实时监控、实时配置</li>
<li>熔断注意事项：数据一致性、熔断监控、用户体验</li>
<li>降级注意事项：数据一致性、熔断监控、用户体验</li>
</ul>
<h2 id="灰度发布与回滚">灰度发布与回滚</h2>
<h2 id="监控体系-日志-报警">监控体系、日志、报警</h2>
<h2 id="故障处理原则">故障处理原则</h2>
<figure data-type="image" tabindex="2"><img src="https://Yixiaohan.github.io/post-images/1721016773015.png" alt="" loading="lazy"></figure>
<h1 id="阅读资料">阅读资料：</h1>
<p><a href="https://en.wikipedia.org/wiki/High_availability">维基百科中的High availability</a></p>
<p><a href="https://stabilityman.github.io/">https://stabilityman.github.io/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[大厂文章阅读：万字长文浅谈系统稳定性建设]]></title>
        <id>https://Yixiaohan.github.io/post/wan-zi-chang-wen-qian-tan-xi-tong-wen-ding-xing-jian-she/</id>
        <link href="https://Yixiaohan.github.io/post/wan-zi-chang-wen-qian-tan-xi-tong-wen-ding-xing-jian-she/">
        </link>
        <updated>2024-06-06T14:01:21.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<ul>
<li>原文链接：<a href="https://mp.weixin.qq.com/s/lPSNDH872Wmy7rkrq_U6_w">https://mp.weixin.qq.com/s/lPSNDH872Wmy7rkrq_U6_w</a></li>
<li>作者：京东物流 王军</li>
</ul>
<h2 id="1-背景"><strong>1 背景</strong></h2>
<p>京东的期中考试：当时618即将到来，各个团队都在进行期中考试前的模拟考试：军演压测，故障演练，系统的梳理以检测系统的稳定性以应对高可用，高性能，高并发。我们知道系统的稳定性建设是贯穿整个研发流程：需求阶段，研发阶段，测试阶段，上线阶段，运维阶段；整个流程中的所有参与人员：产品，研发，测试，运维人员都应关注系统的稳定性。业务的发展及系统建设过程中，稳定性就是那个1，其他的是1后面的0，没有稳定性，就好比将万丈高楼建于土沙之上。本篇文章主要从后端研发的视角针对研发阶段和上线阶段谈下稳定性建设，希望起到抛砖引玉的作用，由于本人的水平有限，文中难免有理解不到位或者不全面的地方，欢迎批评指正。</p>
<h2 id="2-研发阶段"><strong>2 研发阶段</strong></h2>
<p>研发阶段主要参与人员是研发，主要产出物是技术方案设计文档和代码，一个是研发阶段的开始，一个是研发阶段的结束，我们要把控好技术文档和代码质量，从而减少线下bug率及线上的故障。</p>
<h2 id="21-技术方案"><strong>2.1 技术方案</strong></h2>
<h3 id="211-技术方案评审"><strong>2.1.1 技术方案评审</strong></h3>
<p>技术文档的评审需要有本团队的架构师和相关研发，测试，产品，上下游系统的研发同学参与，这样能够最大限度的保证技术方案的实现和产品需求对齐，上下游系统同学也知道我们的实现，采取更加合理的交互方式，测试同学也可以从测试视角给出一些风险点建议，架构师可以确保我们的实现和业界最佳实践的差异，确保合理性，避免过度设计；我们所要做的是开放心态采取大家的意见，严控技术文档的质量；</p>
<p>技术文档的评审可以采用提问的方式，会议开始前可以将技术文档分享给大家，让大家先阅读10分钟，所有同学开始提问，技术文档设计人其实不用读自己的技术文档给大家介绍，只要将大家的问题回答完，并能够思考下大家的建议，合理的采纳后，其实技术文档的质量就有了很大的保证，有的同学在技术文档评审时，比较反感大家的提问，总感觉在挑战自己，有些问题回答不上来，其实可以换种思路：有些问题回答不上来是正常的，可以先将大家的建议采纳了，会后再思考下合理性；大家对自己技术方案是建言献策，是保证自己技术方案的质量，避免在技术方案阶段就存在重大的线上隐患。</p>
<h3 id="212-技术方案关注点"><strong>2.1.2 技术方案关注点</strong></h3>
<p>当我们遇到一个问题的时候，首先要思考的这是一个新问题还是老问题，99.99%遇到的都是老问题，因为我们所从事的是工程技术，不是科学探索；我们所要做的就是看下国内外同行针对这个问题的解法，learn from best practices；所以技术方案的第一步是对标，学习最佳实践，这样能让我们避免走弯路；</p>
<p>同时根据奥卡姆剃刀原理，我们力求技术方案简单，避免过度设计，针对一个复杂的问题，我们的技术方案相对复杂些，简单的问题技术方案相对简单些，我们所要追求的是复杂的问题通过拆解划分，用一个个简单的技术方案解决掉。同时技术文档不仅关注功能的实现，更重要的是关注架构，性能，质量，安全；即如何打造一个高可用系统。打造一个高可用的系统是进行系统稳定性建设的前提，如果我们的系统都不能保证高可用，又谈何系统稳定性建设，下面介绍下进行系统稳定性建设我们在技术方案中常用的方法及关注点。</p>
<h4 id="2121-限流">2.1.2.1 限流</h4>
<p>限流一般是从服务提供者provider的视角提供的针对自我保护的能力，对于流量负载超过我们系统的处理能力，限流策略可以防止我们的系统被激增的流量打垮。京东内部无论是同步交互的JSF, 还是异步交互的JMQ都提供了限流的能力，大家可以根据自己系统的情况进行设置；我们知道常见的限流算法包括：计数器算法，滑动时间窗口算法，漏斗算法，令牌桶算法，具体算法可以网上google下，下面是这些算法的优缺点对比。</p>
<figure data-type="image" tabindex="1"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0Dv0EHcHK3ZhSeRa07SOia6dffVD7gkoPP2JK4KcoEs6IDEeEU0ich303eA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h4 id="2122-熔断降级">2.1.2.2 熔断降级</h4>
<p>熔断和降级是两件事情，但是他们一般是结合在一起使用的。熔断是防止我们的系统被下游系统拖垮，比如下游系统接口性能严重变差，甚至下游系统挂了；这个时候会导致大量的线程堆积，不能释放占用的CPU，内存等资源，这种情况下不仅影响该接口的性能，还会影响其他接口的性能，严重的情况会将我们的系统拖垮，造成雪崩效应，通过打开熔断器，流量不再请求到有问题的系统，可以保护我们的系统不被拖垮。降级是一种有损操作，我们作为服务提供者，需要将这种损失尽可能降到最低，无论是返回友好的提示，还是返回可接受的降级数据。降级细分的话又分为人工降级，自动降级。</p>
<p>人工降级：人工降级一般采用降级开关来控制，公司内部一般采用配置中心Ducc来做开关降级，开关的修改也是线上操作，这块也需要做好监控；</p>
<p>自动降级：自动降级是采用自动化的中间件例如Hystrix，公司的小盾龙等；如果采用自动降级的话；我们必须要对降级的条件非常的明确，比如失败的调用次数等。</p>
<h4 id="2123-超时">2.1.2.3 超时</h4>
<p>分布式系统中的难点之一：不可靠的网络，京东物流现有的微服务架构下，服务之间都是通过JSF网络交互进行同步通信，我们探测下游依赖服务是否可用的最快捷的方式是设置超时时间。超时的设置可以让系统快速失败，进行自我保护，避免无限等待下游依赖系统，将系统的线程耗尽，系统拖垮。</p>
<p>超时时间如何设置也是一门学问，如何设置一个合理的超时时间也是一个逐步迭代的过程，比如下游新开发的接口，一般会基于压测提供一个TP99的耗时，我们会基于此配置超时时间；老接口的话，会基于线上的TP99耗时来配置超时时间。</p>
<p>超时时间在设置的时候需要遵循漏斗原则，从上游系统到下游系统设置的超时时间要逐渐减少，如下图所示。为什么要满足漏斗原则，假设不满足漏斗原则，比如服务A调取服务B的超时时间设置成500ms，而服务B调取服务C的超时时间设置成800ms，这个时候会导致服务A调取服务B大量的超时从而导致可用率降低，而此时服务B从自身角度看是可用的。</p>
<figure data-type="image" tabindex="2"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvFCfKpslbfsIrKJ5t43ATJI2v9gT75tAiagibiaZ8aj3fTNsmlQ0HiaJxKA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h4 id="2124-重试">2.1.2.4 重试</h4>
<p>分布式系统中性能的影响主要是通信，无论是在分布式系统中还是跨团队沟通，communication是最昂贵的；比如我们研发都知道需求的交付有一半以上甚至更多的时间花在跨团队的沟通上，真正写代码的时间是很少的；分布式系统中我们查看调用链路，其实我们系统本身计算的耗时是很少的，主要来自于外部系统的网络交互，无论是下游的业务系统，还是中间件：Mysql, redis, es等等。</p>
<p>所以在和外部系统的一次请求交互中，我们系统是希望尽最大努力得到想要的结果，但往往事与愿违，由于不可靠网络的原因，我们在和下游系统交互时，都会配置超时重试次数，希望在可接受的SLA范围内一次请求拿到结果，但重试不是无限的重试，我们一般都是配置重试次数的限制，偶尔抖动的重试可以提高我们系统的可用率，如果下游服务故障挂掉，重试反而会增加下游系统的负载，从而增加故障的严重程度。在一次请求调用中，我们要知道对外提供的API，后面是有多少个service在提供服务，如果调用链路比较长，服务之间rpc交互都设置了重试次数，这个时候我们需要警惕重试风暴。如下图service D 出现问题，重试风暴会加重service D的故障严重程度。对于API的重试，我们还要区分该接口是读接口还是写接口，如果是读接口重试一般没什么影响，写接口重试一定要做好接口的幂等性。</p>
<figure data-type="image" tabindex="3"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0Dv81RcL9kDdEhnmIYxjW4MWw7XZcnAGKsmxQY7H9UNTOdxK2xPNwprHQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h4 id="2125-兼容">2.1.2.5 兼容</h4>
<p>我们在对老系统，老功能进行重构迭代的时候，一定要做好兼容，否则上线后会出现重大的线上问题，公司内外有大量因为没有做好兼容性，而导致资损的情况。兼容分为：向前兼容性和向后兼容性，需要好好地区分他们，如下是他们的定义:</p>
<ul>
<li>
<p>向前兼容性：向前兼容性指的是旧版本的软件或硬件能够与将来推出的新版本兼容的特性，简而言之旧版本软件或系统兼容新的数据和流量。</p>
</li>
<li>
<p>向后兼容性：向后兼容性则是指新版本的软件或硬件能够与之前版本的系统或组件兼容的特性，简而言之新版本软件或系统兼容老的数据和流量。</p>
</li>
</ul>
<p>根据新老系统和新老数据我们可以将系统划分为四个象限：第一象限：新系统和新数据是我们系统改造上线后的状态，第三象限：老系统和老数据是我们系统改造上线前的状态，第一象限和第三象限的问题我们在研发和测试阶段一般都能发现排除掉，线上故障的高发期往往出现在第二和第四象限，第二象限是因为没有做好向前兼容性，例如上线过程中，发现问题进行了代码回滚，但是在上线过程中产生了新数据，回滚后的老系统不能处理上线过程中新产生的数据，导致线上故障。第四象限是因为没有做好向后兼容性，上线后新系统影响了老流程。针对第二象限的问题，我们可以构造新的数据去验证老的系统，针对第四象限的问题，我们可以通过流量的录制回放解决，录制线上的老流量，对新功能进行验证。</p>
<figure data-type="image" tabindex="4"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvQGBQmW0Z7fC5AVD56WtF2wfwmfyKwx6YzwsMqgxiarrlGCeAuDYSKUQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h4 id="2126-隔离">2.1.2.6 隔离</h4>
<p>隔离是将故障爆炸半径最小化的有效手段，在技术方案设计中，我们通过不同层面的隔离来控制影响范围：</p>
<h5 id="21261-系统层面隔离">2.1.2.6.1 系统层面隔离</h5>
<p>我们知道系统的分类可以分为：在线的系统，离线系统（批处理系统），近实时系统（流处理系统），如下是这些系统的定义：</p>
<ul>
<li>
<p>在线系统：服务端等待请求的到达，接收到请求后，服务尽可能快地处理，然后返回给客户端一个响应，响应时间通常是在线服务性能的主要衡量指标。我们生活中在手机使用的APP大部分都是在线系统；</p>
</li>
<li>
<p>离线系统：或称批处理系统，接收大量的输入数据，运行一个作业来处理数据，并产出输出数据，作业往往需要定时，定期运行一段时间，比如从几分钟到几天，所以用户通常不会等待作业完成，吞吐量是离线系统的主要衡量指标。例如我们看到的报表数据：日订单量，月订单量，日活跃用户数，月活跃用户数都是批处理系统运算一段时间得到的；</p>
</li>
<li>
<p>近实时系统：或者称流处理系统，其介于在线系统和离线系统之间，流处理系统一般会有触发源：用户的行为操作，数据库的写操作，传感器等，触发源作为消息会通过消息代理中间件：JMQ, KAFKA等进行传递，消费者消费到消息后再做其他的操作，例如构建缓存，索引，通知用户等。</p>
</li>
</ul>
<p>以上三种系统是需要进行隔离建设的，因为他们的衡量指标及对资源的使用情况完全不一样的，比如我们小组会将在线系统作为一个服务单独部署：jdl-uep-main, 离线系统和近实时系统作为一个服务单独部署：jdl-uep-worker。</p>
<h5 id="21262-环境的隔离">2.1.2.6.2 环境的隔离</h5>
<p>从研发到上线阶段我们会使用不同的环境，比如业界常见的环境分为：开发，测试，预发和线上环境；研发人员在开发环境进行开发和联调，测试人员在测试环境进行测试，运营和产品在预发环境进行UAT，最终交付的产品部署到线上环境提供给用户使用。在研发流程中，我们部署时要遵循从应用层到中间件层再到存储层，都要在一个环境，严禁跨环境的调用，比如测试环境调用线上，预发环境调用线上等。</p>
<figure data-type="image" tabindex="5"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0Dv4uQrjWSLj3vPJv8icibzruE7HfwE8ph9yib5J75KCRu1CuQHWsaZnO4hA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h5 id="21263-数据的隔离">2.1.2.6.3 数据的隔离</h5>
<p>随着业务的发展，我们对外提供的服务往往会支撑多业务，多租户，所以这个时候我们会按照业务进行数据隔离；比如我们组产生的物流订单数据业务方就包含京东零售，其他电商平台，ISV等，为了避免彼此的影响我们需要在存储层对数据进行隔离，数据的隔离可以按照不同粒度，第一种是通过租户id字段进行区分，所有的数据存储在一张表中，另外一个是库粒度的区分，不同的租户单独分配对应的数据库。</p>
<figure data-type="image" tabindex="6"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvEiceepBlnGnY8MCer7ePH3VhjAGnycs705TiaIsdJ3jVfD1m3Sg86xjg/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<p>数据的隔离除了按照业务进行隔离外，还有按照环境进行隔离的，比如我们的数据库分为测试库，预发库，线上库，全链路压测时，我们为了模拟线上的环境，同时避免污染线上的数据，往往会创建影子库，影子表等。根据数据的访问频次进行隔离，我们将经常访问的数据称为热数据，不经常访问的数据称为冷数据；将经常访问的数据缓存到缓存，提高系统的性能。不经常访问的数据持久化到数据库或者将不使用的数据进行结转归档。</p>
<h5 id="21264-核心非核心隔离">2.1.2.6.4 核心，非核心隔离</h5>
<p>我们知道应用是分级的，京东内部针对应用的重要程度会将应用分为0，1，2，3级应用。业务的流程也分为黄金流程和非黄金流程。在业务流程中，针对不同级别的应用交互，需要将核心和非核心的流程进行隔离。例如在交易业务过程中，会涉及到订单系统，支付系统，通知系统，那这个过程中核心系统是订单系统和支付系统，而通知相对来说重要性不是那么高，所以我们会投入更多的资源到订单系统和支付系统，优先保证这两个系统的稳定性，通知系统可以采用异步的方式与其他两个系统解耦隔离，避免对其他另外两个系统的影响。</p>
<figure data-type="image" tabindex="7"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvpYJcWBZwCcmWxv32UutybkGfjoTtQqt80gJgQFxvfLwFwuwQR1hlFQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h5 id="21265-读写隔离">2.1.2.6.5 读写隔离</h5>
<p>应用层面，领域驱动设计（DDD）中最著名的CQRS（Command Query Responsibility Segregation）将写服务和读服务进行隔离。写服务主要处理来自客户端的command写命令，而读服务处理来自客户端的query读请求，这样从应用层面进行读写隔离，不仅可以提高系统的可扩展性，同时也会提高系统的可维护性，应用层面我们都采用微服务架构，应用层都是无状态服务，可以扩容加机器随意扩展，存储层需要持久化，扩展就比较费劲。除了应用层面的CQRS，在存储层面，我们也会进行读写隔离，例如数据库都会采用一主多从的架构，读请求可以路由到从库从而分担主库的压力，提高系统的性能和吞吐量。所以应用层面通过读写隔离主要解决可扩展问题，存储层面主要解决性能和吞吐量的问题。</p>
<figure data-type="image" tabindex="8"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvWGf7xu7fkzkjH61f7JOicPM0WxvFPiaJ5BP35ic4WJKSxdjqXD0mfHibkA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h5 id="21266-线程池隔离">2.1.2.6.6 线程池隔离</h5>
<p>线程是昂贵的资源，为了提高线程的使用效率，避免创建和销毁的消耗，我们采用了池化技术，线程池来复用线程，但是在使用线程池的过程中，我们也做好线程池的隔离，避免多个API接口复用同一个线程。</p>
<figure data-type="image" tabindex="9"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0Dv82Tx9xAaJmLbic5hGMM1WyOhtvmYbQKibrbYTq8eSWPftazkNUibianZsA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h2 id="22-代码review"><strong>2.2 代码Review</strong></h2>
<p>codeReview是研发阶段的最后一个流程，对线下的bug率和线上质量及稳定性有着重要的作用，针对于代码如何review，谈一些自己的看法：</p>
<ul>
<li>
<p>形成团队代码风格：首先一个团队的代码应该形成该团队的代码风格，这样能够提高codeReview的效率及协作的效率，作为新加入的成员，应该遵循团队的代码风格规范。</p>
</li>
<li>
<p>Review的关注点：代码review切记不要陷入细节，主要以review代码风格为主，如果一个团队形成统一的代码风格，我们通过review风格就能将大部分问题发现，在关注功能的同时，再关注下性能，安全。</p>
</li>
<li>
<p>结对编程：在代码编写过程中，我们要培养结对编程的习惯，这样针对某次需求，codeReview时，熟悉该模块的同事把控下细节，架构师把控风格。</p>
</li>
<li>
<p>控制每次review代码量：每次提交代码进行review时，不要一次性提交review大量的代码，要将review的内容细分，比如一个方法的实现，一个类等。</p>
</li>
<li>
<p>开放心态：review的过程其实是学习提升的过程，通过代码review，虚心接受别人的意见，学习优雅代码的编写方式，提高自己的代码水平。</p>
</li>
</ul>
<p><strong>03</strong></p>
<p></p>
<h2 id="上线阶段"><strong>上线阶段</strong></h2>
<p>理解，首先 MCube 会依据模板缓存状态判断是否需要网络获取最新模板，当获取到模板后进行模板加载，加载阶段会将产物转换为视图树的结构，转换完成后将通过表达式引擎解析表达式并取得正确的值，通过事件解析引擎解析用户自定义事件并完成事件的绑定，完成解析赋值以及事件绑定后进行视图的渲染，最终将</p>
<p>可以看下我司的故障管理平台所记录的故障：发生系统故障一般都是外部对系统做了改变，往往发生在上线阶段：代码的部署，数据库的更改，配置中心的变动等；上线阶段是故障的高发期；一个系统不可能不出线上问题，我们所要追求的是，降低线上的故障频率，缩短故障恢复时间。针对上线过程出现问题，我们知道业界有著名的上线过程三板斧：可监控，可灰度，可回滚。</p>
<h2 id="31-上线三板斧"><strong>3.1 上线三板斧</strong></h2>
<h3 id="311-可监控"><strong>3.1.1 可监控</strong></h3>
<p>上线的过程中，我们的系统要做到可监控，如果没有监控，上线过程中我们对系统的状态是一无所知，是很可怕的。监控什么东西呢，其实监控的就是指标。这就涉及到指标的定义，指标我们分为业务指标和技术指标，技术指标又分为软件和硬件。业务指标一般是我们定义的观测业务变化情况的度量，例如订单量，支付量等。技术层面的软件指标：可用率，TP99, 调用量，技术层面的硬件指标：cpu 内存 磁盘 网络IO。目前我们二级部门在做OpsReview，主要review的是可用率，TP99，调用量这几个指标，分别对应系统的可用性，性能，并发。</p>
<p>做好这些指标的监控后，我们接下来需要做的是针对这些指标做好告警，如果某个指标突破设定的阈值后，需要进行告警通知给我们，针对监控告警指标阈值的设置，建议先严后松，即系统建设初始阶段设置的严格些，避免遗漏告警，出现线上问题，后续随着系统建设的迭代需要设置更合理的告警阈值，避免告警泛滥，造成狼来了的效应。总之上线发布过程的一段时间是事故和问题发生的高峰，这块一定做好指标监控，日志监控，对报警要敏感。</p>
<figure data-type="image" tabindex="10"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvhjnKYzSl5iagZE66gofzuKou816GJ6lj7DZpQS9Qa7TE1dO6tY3aS2g/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h3 id="312-可灰度"><strong>3.1.2 可灰度</strong></h3>
<p>上线过程中，我们要做到可灰度，通过灰度执行变更以限制爆炸半径，降低影响范围，同时灰度过程要做好兼容。灰度分为不同维度的灰度：机器维度，机房维度，地域维度，业务维度：用户，商家，仓，承运商等。</p>
<p>机器维度：我们用行云部署时，可以每个分组先部署一部分机器进行灰度，灰度一段时间比如：24小时没什么问题后，再部署剩余的机器。</p>
<p>机房维度：微服务架构下，我们的应用会部署在不同的机房中，可以按照机房维度灰度，比如先部署发布代码在某个机房分组下，观察一段时间再按照比例扩大灰度机房范围直至全量。例如先部署中云信的机房，灰度一段时间后，再逐步灰度有孚的机房。</p>
<p>地域维度：现在的部署架构都是多机房互为灾备，异地多活，单元化部署，例如业界美团的外卖业务非常适合做异地多活，单元化部署，因为外卖业务的商户，用户，骑手天然具有聚合性，北京的用户大概率不会在上海点外卖，这样根据业务的属性，在系统建设的时候，从应用层到中间件层，再到存储层可以单元化部署在上海地域的机房和北京地域的机房，功能发布的时候可以灰度某个地域，做到地域级别的容灾。</p>
<p>业务维度：在上线过程中，我们也可以根据业务属性进行灰度，例如上线了某个功能或者产品，根据用户维度灰度，某些用户或者某些商户才能使用该功能，产品。</p>
<h3 id="313-可回滚"><strong>3.1.3 可回滚</strong></h3>
<p>线上出现问题时，我们应该优先止损，其次才是分析根因。止损的最快方式就是回滚，回滚分为代码回滚和数据回滚，代码回滚即将我们代码恢复到原有的逻辑，代码回滚有两种方式：开关控制和部署回滚。最快捷的方式是开关控制，一键开关打开或者关闭就可以实现回滚到原有的逻辑，操作成本最低，止损最快速。第二种方式就是部署回滚，通过发布平台，例如行云将代码回滚到上个稳定运行的版本。有时候我们代码回滚完，如果没有做好向前兼容性，系统应用依然有问题，例如上线过程中产生了新数据，回滚完后，代码不能处理新的数据。所以这个时候又涉及到数据的回滚，数据的回滚涉及到修数：将产生的新数据无效掉，或者修改为正确的数据等，当数据量比较大时，数据的回滚一般耗时费力，所以建议做好向前兼容性，直接代码回滚。</p>
<h2 id="32-线上问题应对"><strong>3.2 线上问题应对</strong></h2>
<h3 id="321-常见问题分类"><strong>3.2.1 常见问题分类</strong></h3>
<p>针对线上的问题，我们第一步是识别出是什么问题，然后才能解决问题，针对线上各种各样的问题我们可以进行聚合，归并分类下，针对每种问题去参考业界的处理方法和团队的内的紧急预案，做到临阵不乱。</p>
<figure data-type="image" tabindex="11"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0Dvp8HmUZb2d4DECaImzrxp5HTcqYCMyJVsv0kKa2UEejSVARoJ4gmvAQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h3 id="322-问题生命周期"><strong>3.2.2 问题生命周期</strong></h3>
<p>当出现问题时，我们也需要清楚一个线上问题的生命周期：从问题发生，到我们发现问题，进而进行响应处理，观测问题是否修复，服务是否恢复正常，到最终针对该问题进行复盘，当发生系统发生问题时，我们越早发现问题，对业务的影响越小，整个流程如下图所示。</p>
<figure data-type="image" tabindex="12"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvBMiaZMso02sVcxQxJHFkUBfc0tpZ1wucSuvUqibABXoI2rUKe9pf4hjA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h3 id="323-如何预防问题"><strong>3.2.3 如何预防问题</strong></h3>
<p>就像人的身体生病一样，当问题发生已经晚了，我们要投入更多时间和精力到如何预防中，就像扁鹊的大哥一样治未病，防患于未然。根据破窗原理，一个问题出现了，如果放任不管，问题的严重性会越来越大，直到不可挽回。我们可以从研发的规范，研发的流程，变更流程这几个方面进行预防。</p>
<figure data-type="image" tabindex="13"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvboadicVH3gibYMZicYLmgJsk7iaDaqYCdicOYziaBMjNaz0HxyzyypEToTQQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h3 id="324-如何发现问题"><strong>3.2.4 如何发现问题</strong></h3>
<p>对于一个系统，如果外界不对其做功，根据熵增原理，其会越来越混乱，直到出现问题，外界对其做功，就涉及到改变，因为改变是人在操作，由于各种不可控的因素，也会导致各种线上问题，所以我们可以看到对于一个系统上线后不出现问题是不可能的，当出现问题时，我们第一步是如何快速的发现问题？对于问题发现的渠道，工作中接触到的有如下几种：自我意识，监控告警，业务反馈；</p>
<p>自我意识：我们C2部门每周有一个重要会议OpsReview，各个C3团队会对各团队的核心接口的不规律跳点，毛刺进行可用率，性能，调用量的review，以通过这种主动的，自我意识行为发现潜在的线上问题。同时我们组每天早会的重要一项：UMP监控全域看板的review，我们会对昨天核心接口的可用率，TP99，调用量，进行分析的，对于可用率降低，TP99有毛刺，不规范的流量调用会进行排查原因，尽早自我发现问题，同时也会对机器的CPU, 内存使用率，Mysql, redis , es各种存储进行review。</p>
<p>监控告警：这是我们发现问题最常用的渠道，通过主动的监控指标，被动的接收告警来发现问题，告警指标我们分为业务指标和技术指标，具体分类可详见3.1.1可监控部分；</p>
<p>业务反馈：这种发现问题的方式是我们最不愿意看到的，如果等到业务反馈，说明线上问题已经影响到用户，我们常常因为监控告警的缺失，漏报而导致落后于业务发现问题，所以我们最希望每个人，团队都有这种自我意识，将线上问题提早发现，防患于未然。</p>
<h3 id="325-如何响应问题">3.2.5 如何响应问题</h3>
<p>出现线上问题后，我们个人对问题的认知是非常有限的，并且这个时候人处于一种高度紧张的状态，所以这个时候一定要群里周知自己的leader，将情况如实表达，不要夸大和缩小问题的范围和影响，同时将问题进行通告。整个问题的响应过程包含以下几步：</p>
<p>1.保留现场：问题发生的现场是我们排查问题的依据，所以要将现场的日志，数据等信息保存好，比如内存dump, 线程dump，避免机器重启后这些信息的丢失；</p>
<p>2.提供信息：提供自己所知道的信息，协助排查，不要扩大和缩小问题；</p>
<p>3.恢复服务：当出现线上问题时，我们追求的是以最快的速度恢复服务，快速止损，业界有快速止血，恢复服务的几板斧：回滚：服务回滚，数据回滚，重启，扩容，禁用节点，功能降级；</p>
<p>4.双重确认：服务恢复后，我们需要确认是否恢复了，可以通过观察：业务指标是否正常，技术指标是否正常，数据是否正常，日志是否正常等来观测问题的恢复情况；</p>
<p>5.故障通告：确认问题没有什么问题后，需要在应急群中周知大家：业务人员，产品经理，系统的上下游，测试人员，SRE等。并让产品和业务进行确认，然后周知用户。</p>
<h3 id="326-如何定位问题"><strong>3.2.6 如何定位问题</strong></h3>
<p>服务恢复后，我们可以回过头来细致地分析下到底是什么原因导致了线上的问题。定位问题也要讲究方法论，这就涉及到定位问题三要素：知识，工具，方法。</p>
<p>知识：相对其他行业，计算机行业应该是知识更新迭代最快的行业，所以我们需要不断地去学习，更新自己的知识库，不给自己设限。例如你想解决FullGC问题，你必须对JVM进行系统的学习，想解决慢sql，必须对Mysql进行系统的学习，现在AI大模型这么火，我们也需要对prompt engineering， RAG ， Agent, 多模态等进行学习了解。有了知识我们才能遇到问题时，知道是什么，为什么？</p>
<p>工具：工欲善其事，必先利其器，工程师要善于借助公司工具来提高解决问题的效率，熟练使用公司各种中间件工具，公司已经有的中间件，优先使用公司的中间件，公司内一个中间件团队维护的中间件工具要优于业务研发小组内维护的中间件工具，不要小组内部，或者团队内部重复造轮子，并且小组内人员的流动变更，容易造成中间件没人维护。下图是公司常用的中间件工具：</p>
<figure data-type="image" tabindex="14"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvfBVoIQwqNFZZrXupB0ePvwDNpkUicS8ricUbZeIIaBic4vlkU3Syf5wkA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<p>方法：解决问题我们要讲究方法，选择正确的方法可以事半功倍，提高我们定位问题及解决问题的效率，下面是我们研发人员常见的排查问题的方法：</p>
<figure data-type="image" tabindex="15"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvYicmwaIBgrHn9hySWjQtfYqM9EMdNpIqOQE2U7AWbhhAKOUN9q9R91g/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h3 id="327-如何修复问题"><strong>3.2.7 如何修复问题</strong></h3>
<p>有了知识，工具和方法后，其实我们很快的就定位到问题了，定位到问题后，我们就要想办法如何去把问题修复了，以下是问题修复的流程：</p>
<figure data-type="image" tabindex="16"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0Dv0Uianz9LAF2L2F3OySMPNF5KvmY8iceqUO9cyIAnSaGJRBbGrkRMiczFQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h3 id="328-如何复盘问题"><strong>3.2.8 如何复盘问题</strong></h3>
<p>问题发生后，我们需要从此次问题中分析根因，并汲取教训和经验，避免犯同样的错误。这就涉及到问题的复盘，如何进行问题的复盘呢，一般会经过如下几个步骤：回顾目标，评价结果，分析原因，总结经验。例如我们C2部门每周的opsReview会议上都会有线上问题的复盘：coe，如何进行coe复盘谈一些自己的思考。</p>
<ul>
<li>
<p>参考业界的5WHY分析法剖析问题的根因</p>
</li>
<li>
<p>5WHY分析法：5代表的是问题的深度，而不是问题的数量</p>
</li>
<li>
<p>基于问题的答案继续进行提问，5个问题是有关联的，层层递进的，找到问题的根因</p>
</li>
</ul>
<figure data-type="image" tabindex="17"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VgOVyHia4T4eXrZ0qtlM0DvyLY8ws3qCSDYvjkbPEOPT3HKqXZN4GNtQ17ovX3VDM0ZyxBe6gaugw/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<p><strong>04</strong></p>
<p></p>
<h2 id="参考资料"><strong>参考资料</strong></h2>
<p>理解，首先 MCube 会依据模板缓存状态判断是否需要网络获取最新模板，当获取到模板后进行模板加载，加载阶段会将产物转换为视图树的结构，转换完成后将通过表达式引擎解析表达式并取得正确的值，通过事件解析引擎解析用户自定义事件并完成事件的绑定，完成解析赋值以及事件绑定后进行视图的渲染，最终将</p>
<ul>
<li>
<p>https://itrevolution.com/articles/20-years-of-google-sre-10-key-lessons-for-reliability/</p>
</li>
<li>
<p>https://learn.microsoft.com/en-us/previous-versions/msp-n-p/jj591573(v=pandp.10)?redirectedfrom=MSDN</p>
</li>
<li>
<p>https://sre.google/books/</p>
</li>
</ul>
<figure data-type="image" tabindex="18"><img src="https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1UibHPAanTaZmNVW2yn5bYF7rUiaXg1tNeElo6pVnvsQhGsVMSiaLn7bT6icNKw0caXsV9icVXUbRQ3S7A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL 性能调优 Check List]]></title>
        <id>https://Yixiaohan.github.io/post/mysql-xing-neng-diao-you-check-list/</id>
        <link href="https://Yixiaohan.github.io/post/mysql-xing-neng-diao-you-check-list/">
        </link>
        <updated>2024-06-02T14:19:40.000Z</updated>
        <summary type="html"><![CDATA[<p>当说到 SQL 慢时，可能有哪些原因？</p>
<h2 id="无索引或者索引失效">无索引或者索引失效</h2>
<p>解决思路：explain 关键字</p>
<h2 id="长事务大事务">长事务（大事务）</h2>
<p>思考题：声明式事务（注解）、编程式事务（手动写代码），其中哪个导致的长事务问题多？</p>
<h2 id="多表join">多表join</h2>
<h2 id="查询字段太多">查询字段太多</h2>
<ul>
<li>排查确定业务是否真的需要查询出所有字段，select * from</li>
<li>数据库中存放的数据都是适合在数据库中存放的吗？（大文本）</li>
</ul>
<ol>
<li>只查询需要的列</li>
<li>针对最频繁的查询来设计覆盖索引<br>
以两种说法本质上都是为了避免<strong>回表</strong></li>
</ol>
<h2 id="表中数据量太大">表中数据量太大</h2>
<p>解决思路：</p>
<ul>
<li>数据归档、冷热分离</li>
<li>分库分表</li>
<li>其他存储（ES、TiDB等）</li>
</ul>
<h2 id="索引区分度不高">索引区分度不高</h2>
<p>性别、状态等区分度不高的字段，做为索引是否合适？</p>
<h2 id="数据库连接数不够">数据库连接数不够</h2>
<h2 id="锁竞争导致的等待">锁竞争导致的等待</h2>
<h2 id="数据库的表结构不合理">数据库的表结构不合理</h2>
<p>解决思路：合理的冗余</p>
<h2 id="数据库-io-或者数据库-cpu-比较高">数据库 IO 或者数据库 CPU 比较高</h2>
<h2 id="数据库参数不合理">数据库参数不合理</h2>
<p>找 DBA 咨询一下</p>
<h3 id="系统配置优化">系统配置优化</h3>
<p>大多数运行在Linux机器上，如tcp连接数的限制、打开文件数的限制、安全性的限制，因此我们要对这些配置进行相应的优化。</p>
<h3 id="硬件配置优化">硬件配置优化</h3>
<ol>
<li>
<p>数据库主机的 IO 性能是需要最优先考虑的一个因素</p>
</li>
<li>
<p>数据库主机和普通的应用程序服务器相比，资源要相对集中很多，单台主机上所需要进行的计算量自然也就比较多，所以数据库主机的 CPU 处理能力也是一个重要的因素</p>
</li>
<li>
<p>数据库主机的网络设备（一般指网卡等）的性能也可能会成为系统的瓶颈</p>
</li>
</ol>
<h2 id="是否可以转化为批量查询">是否可以转化为批量查询</h2>
<h2 id="硬件是否合理机械硬盘-ssd">硬件是否合理（机械硬盘、SSD）</h2>
]]></summary>
        <content type="html"><![CDATA[<p>当说到 SQL 慢时，可能有哪些原因？</p>
<h2 id="无索引或者索引失效">无索引或者索引失效</h2>
<p>解决思路：explain 关键字</p>
<h2 id="长事务大事务">长事务（大事务）</h2>
<p>思考题：声明式事务（注解）、编程式事务（手动写代码），其中哪个导致的长事务问题多？</p>
<h2 id="多表join">多表join</h2>
<h2 id="查询字段太多">查询字段太多</h2>
<ul>
<li>排查确定业务是否真的需要查询出所有字段，select * from</li>
<li>数据库中存放的数据都是适合在数据库中存放的吗？（大文本）</li>
</ul>
<ol>
<li>只查询需要的列</li>
<li>针对最频繁的查询来设计覆盖索引<br>
以两种说法本质上都是为了避免<strong>回表</strong></li>
</ol>
<h2 id="表中数据量太大">表中数据量太大</h2>
<p>解决思路：</p>
<ul>
<li>数据归档、冷热分离</li>
<li>分库分表</li>
<li>其他存储（ES、TiDB等）</li>
</ul>
<h2 id="索引区分度不高">索引区分度不高</h2>
<p>性别、状态等区分度不高的字段，做为索引是否合适？</p>
<h2 id="数据库连接数不够">数据库连接数不够</h2>
<h2 id="锁竞争导致的等待">锁竞争导致的等待</h2>
<h2 id="数据库的表结构不合理">数据库的表结构不合理</h2>
<p>解决思路：合理的冗余</p>
<h2 id="数据库-io-或者数据库-cpu-比较高">数据库 IO 或者数据库 CPU 比较高</h2>
<h2 id="数据库参数不合理">数据库参数不合理</h2>
<p>找 DBA 咨询一下</p>
<h3 id="系统配置优化">系统配置优化</h3>
<p>大多数运行在Linux机器上，如tcp连接数的限制、打开文件数的限制、安全性的限制，因此我们要对这些配置进行相应的优化。</p>
<h3 id="硬件配置优化">硬件配置优化</h3>
<ol>
<li>
<p>数据库主机的 IO 性能是需要最优先考虑的一个因素</p>
</li>
<li>
<p>数据库主机和普通的应用程序服务器相比，资源要相对集中很多，单台主机上所需要进行的计算量自然也就比较多，所以数据库主机的 CPU 处理能力也是一个重要的因素</p>
</li>
<li>
<p>数据库主机的网络设备（一般指网卡等）的性能也可能会成为系统的瓶颈</p>
</li>
</ol>
<h2 id="是否可以转化为批量查询">是否可以转化为批量查询</h2>
<h2 id="硬件是否合理机械硬盘-ssd">硬件是否合理（机械硬盘、SSD）</h2>
<!-- more -->
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我对新零售电商架构的一些思考]]></title>
        <id>https://Yixiaohan.github.io/post/wo-dui-xin-ling-shou-dian-shang-jia-gou-de-yi-xie-si-kao/</id>
        <link href="https://Yixiaohan.github.io/post/wo-dui-xin-ling-shou-dian-shang-jia-gou-de-yi-xie-si-kao/">
        </link>
        <updated>2024-06-01T14:59:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="业务架构">业务架构</h1>
<h2 id="新零售电商是什么">新零售电商是什么</h2>
<p>新零售电商是一个比较复杂的业务（线上线下结合），电商行业的模型，在各个公司、各个阶段表现也不一样。</p>
<p>但本质上电商业务的参与者，还是围绕着 <strong>人-货-场</strong> 解决各个域的问题。</p>
<ul>
<li>
<p>人（流量供给）<br>
货最终是要卖给人（顾客）的。没有流量（人），货就没有去向。 为什么说阿里电商是流量的黑洞呢？</p>
</li>
<li>
<p>货（商品供给）<br>
商家、商品端，包括供应链、物流等，都是围绕 B 端提供服务。</p>
</li>
<li>
<p>场<br>
人 与 货 产生关联的地方。 在场中，达成人、货交易。场地，线下门店。场，618活动、双11等。</p>
</li>
</ul>
<h2 id="新零售电商系统组成">新零售电商系统组成</h2>
<p>包括但不限于以下系统组成：</p>
<ul>
<li>核心（支付、购物车、交易、下单、库存、商品、活动、风控、履约、物流、供应链）</li>
<li>导购系统、引流系统、销售知识库、演示系统、新零售产品站</li>
<li>组织关系、数字化建店、客流系统、合作商管理</li>
<li>新零售WMS、调拨、进货、盘点、固资管理、样机运营、电子价签、供需管理</li>
<li>商返利、员工激励、财务、税务等</li>
<li>售后</li>
<li>BI</li>
</ul>
<h2 id="我们的基本架构逻辑">我们的基本架构逻辑</h2>
<ul>
<li>软件架构领域，也不存在银弹。没有万能、适用于各场景的技术</li>
<li>没有最好的架构，只有适合的架构</li>
<li>架构设计，就是在做 trade-off</li>
</ul>
<p>领域建模</p>
<ul>
<li>系统架构：以领域划分系统架构</li>
<li>实体建模：分析业务，建立领域模型</li>
<li>梳理边界：定义领域边界，高内聚低耦合</li>
</ul>
<p>网关收敛</p>
<ul>
<li>多租户能力：适应不同的端场景</li>
<li>鉴权能力：使用不同的鉴权需求</li>
</ul>
<p>架构拆分</p>
<ul>
<li>端变薄：端组件化，端只是触点</li>
<li>领域变大变圆：业务、产、研拆到领域内，通过领域协作提效</li>
<li>领域沉淀：交易以下公共领域沉淀到中台</li>
</ul>
<p>数据收敛</p>
<ul>
<li>数据属于领域：只允许接口交互</li>
<li>领域数据领域生：交易即数据，数据正确性</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://Yixiaohan.github.io/post-images/1716195672292.png" alt="" loading="lazy"></figure>
<h2 id="一定要拆服务怎么拆">一定要拆服务，怎么拆？</h2>
<p>按界面拆分还是按数据拆分？</p>
<ul>
<li>数据是高耦合的</li>
<li>界面是低耦合的</li>
</ul>
<p>按数据拆分，如何拆解？</p>
<ul>
<li>按领域实体与领域规则拆分</li>
<li>领域建模（DDD）是微服务的好朋友</li>
</ul>
<h2 id="领域型服务">领域型服务</h2>
<h3 id="特点">特点</h3>
<ol>
<li>明显领域特征：包含领域核心实体，核心规则</li>
<li>内聚性：充满逻辑内聚性，与外界服务关联较少</li>
<li>稳定性：需求相对稳定，变化率不高</li>
</ol>
<h3 id="建议设计思想">建议设计思想</h3>
<ol>
<li>坚决拒绝复制走数据</li>
<li>对领域深刻建模，有长远规划</li>
<li>提供领域能力接口，而非数据读写接口</li>
</ol>
<h3 id="典型-service">典型 Service</h3>
<ul>
<li>库存服务</li>
</ul>
<h2 id="流程型服务">流程型服务</h2>
<h3 id="特点-2">特点</h3>
<ol>
<li>以调度一个或多个领域服务为主要工作</li>
<li>表达的是业务流程，通常有角色，状态机等概念</li>
<li>通常与一个或多个B端管理后台绑定</li>
</ol>
<h3 id="建议设计思想-2">建议设计思想</h3>
<ol>
<li>流程系统可收敛也可松散，流程系统的核心价值是快，而不是收敛</li>
<li>流程服务不应该再被另一个流程服务包装</li>
<li>简单的业务场景下，流程与领域服务也可以合一，务必考虑未来业务的变化</li>
<li>一个流程服务调度一个领域服务是非常正常的</li>
</ol>
<h3 id="典型-service-2">典型 Service</h3>
<ol>
<li>建店系统</li>
<li>盘点服务</li>
</ol>
<h3 id="更复杂的场景">更复杂的场景</h3>
<ul>
<li>购物车服务：领域与流程都存在</li>
</ul>
<h2 id="领域网关服务">领域网关服务</h2>
<h3 id="特点-3">特点</h3>
<ol>
<li>通常不产生数据，只聚合数据</li>
<li>核心逻辑是数据编排</li>
<li>聚合的数据都拥有一个相同的领域实体 ID</li>
<li>解决的是效率问题，帮助上层服务更简单理解领域数据</li>
</ol>
<h3 id="建议设计思想-3">建议设计思想</h3>
<ol>
<li>本领域的核心领域服务，建议下沉到另一个服务中，网关服务只读不写</li>
<li>网关一般只解决跨子领域数据读问题，仍然允许上层服务直接调用一个子领域服务，而不必代理所有流量</li>
<li>不建议定义无边界网关，甚至团队网关，它会成为组织瓶颈</li>
</ol>
<h3 id="典型-service-3">典型 Service</h3>
<ul>
<li>组织中台</li>
</ul>
<h2 id="bi-型服务">BI 型服务</h2>
<h3 id="特点-4">特点</h3>
<p>从 OLAP 平台查询数据，并展示给用户</p>
<h3 id="典型-service-4">典型 Service</h3>
<ul>
<li>App BI 服务</li>
<li>部门 BI 服务</li>
</ul>
<h2 id="通用服务">通用服务</h2>
<h3 id="特点-5">特点</h3>
<ul>
<li>无领域特性，无业务特性的功能</li>
</ul>
<h3 id="建议设计思想-4">建议设计思想</h3>
<ol>
<li>所有“团队内的通用服务”，都建议改造成公司的通用服务</li>
<li>不要为了造轮子而造轮子，尽可能复用成熟组件</li>
</ol>
<h3 id="典型-service-5">典型 Service</h3>
<ul>
<li>监控服务</li>
<li>调度服务</li>
<li>消息服务</li>
</ul>
<h2 id="典型的三种服务的协作过程进货体系">典型的三种服务的协作过程——进货体系</h2>
<figure data-type="image" tabindex="2"><img src="https://Yixiaohan.github.io/post-images/1716196039532.png" alt="" loading="lazy"></figure>
<h2 id="技术-业务解耦架构治理的1-9原则">技术-业务解耦——架构治理的1-9原则</h2>
<h3 id="1-9原则">1-9原则</h3>
<ul>
<li>90% 的技术特性，只应该存在于 10% 的通用服务中</li>
<li>90% 的业务服务，只应该使用 10% 的稳定技术特性</li>
</ul>
<h3 id="从软件演变史去看">从软件演变史去看</h3>
<p>操作系统，文件系统，数据库，缓存服务，监控系统……</p>
<ul>
<li>每个通用软件都是从业务软件中抽象而生的，程序的本身就是抽象</li>
<li>所以足够“炫技”的技术密集型程序，我们尽可能把它抽象成通用服务</li>
</ul>
<h3 id="极限情况下的反范式设计">极限情况下的反范式设计</h3>
<ul>
<li>在核心业务，核心场景，极限需求之下，我们也是可以破坏这个原则的</li>
</ul>
<h2 id="架构就是我们的技术价值观">架构就是我们的技术价值观</h2>
<ul>
<li>设计即权衡，权衡的核心标准就是技术价值观</li>
</ul>
<p>技术价值观决定了架构思想！</p>
<p>我们的基本技术价值观是什么？<br>
<strong>高效、合作、开放</strong></p>
<p>一切效率工具的发展逻辑<br>
<img src="https://Yixiaohan.github.io/post-images/1716195813850.png" alt="" loading="lazy"></p>
<p>新零售电商数字化的本质也是一样的<br>
<img src="https://Yixiaohan.github.io/post-images/1716195821920.png" alt="" loading="lazy"></p>
<h1 id="技术架构之道大纲版">技术架构之道（大纲版）</h1>
<h2 id="高并发">高并发</h2>
<h3 id="高并发读">高并发读</h3>
<ul>
<li>加缓存</li>
<li>并发读</li>
<li>重写轻读</li>
<li>读写分离（CQRS 架构）</li>
</ul>
<h3 id="高并发写">高并发写</h3>
<ul>
<li>数据分片</li>
<li>任务分片</li>
<li>异步化</li>
<li>批量</li>
</ul>
<h3 id="容量规划">容量规划</h3>
<ul>
<li>吞吐量、响应时间、并发数</li>
<li>压力测试</li>
<li>容量评估</li>
</ul>
<h2 id="高可用与稳定性">高可用与稳定性</h2>
<ul>
<li>
<p>多副本</p>
</li>
<li>
<p>隔离、限流、熔断、降级<br>
限流注意事项：限流返回给客户端的错误代码、实时监控、实时配置<br>
熔断注意事项：数据一致性、熔断监控、用户体验<br>
降级注意事项：数据一致性、熔断监控、用户体验</p>
</li>
<li>
<p>灰度发布与回滚</p>
</li>
<li>
<p>监控体系、日志、报警</p>
</li>
</ul>
<h2 id="数据持久层">数据持久层</h2>
<ul>
<li>冷热分离</li>
<li>查询分离（读写分离）</li>
<li>分库分表</li>
</ul>
<h2 id="缓存层">缓存层</h2>
<ul>
<li>读缓存</li>
<li>写缓存</li>
</ul>
<h1 id="技术架构之道文字详情版">技术架构之道（文字详情版）</h1>
<h2 id="高并发-2">【高并发】</h2>
<ol>
<li>
<p><strong>分布式架构</strong>：将系统分解成多个模块，采用分布式架构来降低单点故障的风险，并提高系统的可伸缩性和性能</p>
</li>
<li>
<p><strong>集群部署</strong>：将一个服务通过集群进行部署，来提升系统整体的吞吐量及响应速度，并使用负载均衡技术将请求均衡分配给多个服务器，以提高系统的性能和可用性。</p>
</li>
<li>
<p><strong>利用缓存</strong>：使用缓存、NoSQL等技术，以提高数据读写的性能和可靠性</p>
</li>
<li>
<p><strong>异步处理</strong>：采用异步处理机制，如使用消息队列、事件驱动等技术，以降低请求响应时间和提高系统吞吐量。</p>
</li>
<li>
<p><strong>预加载</strong>：使用预加载技术来提前加载需要的资源，以减少用户等待时间。</p>
</li>
<li>
<p><strong>代码优化和调优</strong>：对系统代码进行优化和调优，如采用异步I/0、避免锁(减小锁的粒度)、减少循环和递归.避免长事务等，以提高系统性能。</p>
</li>
<li>
<p><strong>数据库优化</strong>：合理的数据库设计和优化，包括合理的索引设计、分库分表、读写分离、缓存优化等，可以有效提高系统的并发度和响应速度。</p>
</li>
<li>
<p><strong>分库分表</strong>：将一个大型的数据库拆分成多个小型的数据库(分库)，然后将每个小型数据库中的表再进行拆分(分表)，从而减轻单个数据库或表的读写压力，通过分库分表，可以将大量的读写操作分散到多个数据库或表中，从而提高系统的并发度和响应速度，</p>
</li>
<li>
<p><strong>读写分离</strong>：读写分离是一种常用的数据库优化技术，它将读操作和写操作分配到不同的数据库实例上处理。通过读写分离，主库主要负责写操作，从库则负责读操作，从而提高了系统的并发度和可扩展性。同时，读写分离还可以提高系统的可用性和容错能力，因为即使主库出现故障，从库仍然可以提供读服务。</p>
</li>
<li>
<p><strong>防止雪崩</strong>：通过使用限流、熔断、降级等技术，可以防止系统因为某个组件出现故障而导致整个系统崩溃的雪崩效应。</p>
</li>
<li>
<p><strong>容错和监控</strong>：实现容错机制，如备份、容灾、负载降级等，以保障系统的可用性。同时，使用监控工具来实时监测系统的运行状况和性能瓶颈，及时做出调整和优化。</p>
</li>
<li>
<p><strong>测试和评估</strong>：进行全面的性能测试和评估，包括压力测试、负载测试、安全测试等，以发现并解决系统的性能瓶颈和安全隐患。</p>
</li>
</ol>
<p>综上所述，设计高并发系统需要从多个方面考虑，需要综合运用各种技术和工具，进行全面的测试和评估，以实现系统的高可用、高性能和高安全性。</p>
<h2 id="高性能">【高性能】</h2>
<p>设计高性能的分布式系统需要考虑多个因素，包括架构设计、负载均衡、数据一致性、容错处理、消息队列、缓存、性能监控和安全性等。下面是一些可以帮助设计高性能分布式系统的方法：</p>
<ol>
<li>
<p><strong>架构设计</strong>：选择合适的分布式系统架构，例如微服务架构、SOA架构等，可以有效地提高系统性能</p>
</li>
<li>
<p><strong>负载均衡</strong>：使用负载均衡技术可以将请求分布到多个节点上，提高系统的性能和可用性。可以使用硬件负载均衡器或软件负载均衡器来实现，</p>
</li>
<li>
<p><strong>数据一致性</strong>：保证数据一致性是设计分布式系统的一个重要方面，可以使用一致性哈希、副本复制、分片等技术来保证数据一致性。</p>
</li>
<li>
<p><strong>容错处理</strong>：设计分布式系统时必须考虑容错处理，以防止单点故障。可以使用备份、自动故障转移、容器化等技术来实现容错处理。</p>
</li>
<li>
<p><strong>消息队列</strong>：使用消息队列可以解耦系统组件，提高系统的可伸缩性和性能。</p>
</li>
<li>
<p><strong>缓存</strong>：使用缓存技术可以减轻数据库的负载，提高系统性能</p>
</li>
<li>
<p><strong>性能监控</strong>：使用性能监控工具可以监测系统的性能瓶颈，提高系统的性能和可用性。</p>
</li>
<li>
<p><strong>安全性</strong>：分布式系统的安全性是至关重要的，可以使用身份验证、访问控制等技术来保证系统的安全性</p>
</li>
</ol>
<h2 id="高可用">【高可用】</h2>
<p>设计一个高可用架构需要考虑多个方面，包括可用性、可靠性、性能、扩展性、安全性等。下面是一些设计高可用架构的一般性原则和方法：</p>
<ol>
<li>
<p><strong>设计集群架构</strong>：采用多节点的集群架构可以提高系统的可用性和可靠性，从而避免单点故障导致系统不可用。</p>
</li>
<li>
<p><strong>采用分布式架构</strong>：采用分布式架构可以将系统的负载分散到多个节点上，从而提高系统的性能和可扩展性。</p>
</li>
<li>
<p><strong>实现故障转移和容错机制</strong>：通过使用冗余组件、备份数据等技术手段，可以实现故障转移和容错机制。例如，采用主从复制、备份、快速切换等技术来确保数据不丢失、系统快速恢复。</p>
</li>
<li>
<p><strong>可靠的服务器和网络</strong>：选择可靠的服务器和网络设备，以确保它们能够在故障时正常运行。可以采用多个服务器进行冗余备份，以实现故障转移和负载均衡。可以选择高可靠性网络设备和路由器，以避免网络故障。</p>
</li>
<li>
<p><strong>容灾和备份</strong>：需要设置容灾和备份计划，以确保在自然灾害、人为错误或其他紧急情况下能够快速恢复服务。可以使用云备份和容灾服务，以提高备份和恢复的效率和可靠性。</p>
</li>
<li>
<p><strong>设计监控和自动化工具</strong>：通过使用监控工具和自动化工具可以实现对系统的实时监控和自动化维护。例如，通过使用系统监控工具、自动化运维工具等来实现自动化运维、自动化扩容等功能，从而减少手动操作和人为错误。</p>
</li>
<li>
<p><strong>实现数据安全保护</strong>：通过采用多层次的安全策略来保护数据的安全性。例如，使用加密技术、防火墙、入侵检测等技术来保护系统和数据的安全。</p>
</li>
<li>
<p><strong>进行容量规划和性能优化</strong>：通过进行容量规划和性能优化，可以提高系统的性能和可扩展性。例如，通过使用缓存、调整配置参数、优化代码等技术手段来提高系统的性能和稳定性。</p>
</li>
<li>
<p><strong>设计自动化扩容和弹性伸缩</strong>：通过设计自动化扩容和弹性伸缩功能，可以根据业务需求和系统负载情况来自动调整系统资源。例如，通过使用自动化扩容工具和自动化弹性伸缩策略来实现系统资源的自动分配和调整。</p>
</li>
</ol>
<p>需要注意的是，设计高可用架构需要综合考虑业务需求、技术方案、资源投入等因素，同时需要不断进行优化和改进，以实现最优的性能和可用性。</p>
<h1 id="其他架构">其他架构</h1>
<p>除了业务架构、技术架构，我们也可以做企业架构维度思考，比如还有数据架构、应用架构等</p>
<p>阅读资料：<a href="https://tonydeng.github.io/EA-practices/">《企业架构设计方法与实践》</a></p>
<h2 id="知道在做什么">知道在做什么</h2>
<p>我们做一个事情，不是简单的按照指令以及经验去完成即可，这样的工作经验对自己来说没什么价值。<br>
好一些的做法是，从各个架构层面都知道自己在做们么和怎么做，才能立体的丰富我们的架构和技术经验，对成长提供养分。</p>
<p>举一些工作上需要重点关注的点:</p>
<ul>
<li>
<p><strong>业务架构上</strong>:<br>
我所负责的功能会带来什么业务价值，重要性与我的投入是否匹配（ROI）</p>
</li>
<li>
<p><strong>应用架构上</strong>:<br>
我做的这个功能属于什么服务和领域，此服务有没有相关的设计开发规范</p>
</li>
<li>
<p><strong>数据架构上</strong>:<br>
数据模型怎么建，数据每日增量怎么样，增量大的表是分库分表还是冷数备份，或者迁移到支持分片存储的中间件</p>
</li>
<li>
<p><strong>技术架构上</strong>:<br>
目前服务所使用的技术有哪些我这个功能应该如何做技术选型</p>
</li>
<li>
<p><strong>质量和安全保障</strong>:<br>
我这个功能模块的 SLA 要求是什么，是否需要支持水平扩展；重要的告警是否都加上了，我存储的这些数据需要加密吗</p>
</li>
</ul>
<h2 id="知道为什么要这么做">知道为什么要这么做</h2>
<p>当我们接到一件研发任务，需要从各个层面去思考“为什么”，举一些例子：</p>
<ul>
<li>
<p><strong>业务</strong>：<br>
为什么需要做这么一个东西它在业务流程和价值链路上处于什么位置？</p>
</li>
<li>
<p><strong>应用</strong>：<br>
为什么是放在这个领域、这个服务里，而不是放到 XXX 里？为什么是提供 dubbo 接口，而不是 HTTP 接口</p>
</li>
<li>
<p><strong>数据</strong>：<br>
为什么要分库分表，而不是冷数据备份？当前在使用的数据模型我真的看懂了么</p>
</li>
<li>
<p><strong>技术</strong>：<br>
为什么这里用了策略模式？领域驱动的实现，就一定适用吗？</p>
</li>
<li>
<p><strong>质量</strong>：<br>
为什么要写单测？为什么他的服务可以压到 20000，我的只能到 10000？</p>
</li>
</ul>
<h1 id="附软件质量模型">附：软件质量模型</h1>
<p>另外，我们也可以从 软件质量模型 方面思维架构要关心的点<br>
<img src="https://Yixiaohan.github.io/post-images/1716201329228.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[读书：《电商产品经理宝典：电商后台系统产品逻辑全解析》]]></title>
        <id>https://Yixiaohan.github.io/post/du-shu-bi-ji-lesslessdian-shang-chan-pin-jing-li-bao-dian-dian-shang-hou-tai-xi-tong-chan-pin-luo-ji-quan-jie-xi-greatergreater/</id>
        <link href="https://Yixiaohan.github.io/post/du-shu-bi-ji-lesslessdian-shang-chan-pin-jing-li-bao-dian-dian-shang-hou-tai-xi-tong-chan-pin-luo-ji-quan-jie-xi-greatergreater/">
        </link>
        <updated>2024-05-25T12:12:37.000Z</updated>
        <content type="html"><![CDATA[<p>从多抓鱼买了一本<a href="https://book.douban.com/subject/27157290/">《电商产品经理宝典：电商后台系统产品逻辑全解析》</a>，把思维导图笔记分享过来。图片太大，只帖部分章节思维导图了。</p>
<h2 id="第1章-产品经理概述">第1章　 产品经理概述</h2>
<h2 id="第2章-支撑线后台概述">第2章　 支撑线后台概述</h2>
<h2 id="第3章-商品中心">第3章　商品中心</h2>
<figure data-type="image" tabindex="1"><img src="https://Yixiaohan.github.io/post-images/1717762526366.png" alt="" loading="lazy"></figure>
<h2 id="第4章-促销系统">第4章　促销系统</h2>
<h2 id="第5章-内容管理">第5章　内容管理</h2>
<h2 id="第6章-库存管理">第6章　库存管理</h2>
<figure data-type="image" tabindex="2"><img src="https://Yixiaohan.github.io/post-images/1717763212027.png" alt="" loading="lazy"></figure>
<h2 id="第7章-物流管理">第7章　物流管理</h2>
<figure data-type="image" tabindex="3"><img src="https://Yixiaohan.github.io/post-images/1717763280166.png" alt="" loading="lazy"></figure>
<h2 id="第8章-采购管理">第8章　采购管理</h2>
<h2 id="第9章-仓库管理系统">第9章　仓库管理系统</h2>
<figure data-type="image" tabindex="4"><img src="https://Yixiaohan.github.io/post-images/1717763335836.png" alt="" loading="lazy"></figure>
<h2 id="第10章-订单管理">第10章　订单管理</h2>
<figure data-type="image" tabindex="5"><img src="https://Yixiaohan.github.io/post-images/1717763400616.png" alt="" loading="lazy"></figure>
<h2 id="第11章-其他系统综述">第11章　其他系统综述</h2>
<h2 id="第12章-跨境电商的不同点">第12章　跨境电商的不同点</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最佳实践系列：常规项目管理（跨部门项目）的 12 个最佳实践]]></title>
        <id>https://Yixiaohan.github.io/post/zui-jia-shi-jian-xi-lie-chang-gui-xiang-mu-guan-li-kua-bu-men-xiang-mu-de-12-ge-zui-jia-shi-jian/</id>
        <link href="https://Yixiaohan.github.io/post/zui-jia-shi-jian-xi-lie-chang-gui-xiang-mu-guan-li-kua-bu-men-xiang-mu-de-12-ge-zui-jia-shi-jian/">
        </link>
        <updated>2024-05-24T14:23:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="常规的项目管理">常规的项目管理</h2>
<h3 id="需求分析">需求分析</h3>
<ul>
<li>
<p>明确原始需求【必须要接触最原始的用户需求】</p>
<ul>
<li>忽略需求方提出的所谓解决方案——最佳实践1</li>
</ul>
</li>
</ul>
<ul>
<li>
<p>竞品分析</p>
</li>
<li>
<p>撰写 UseStory</p>
</li>
<li>
<p>拉 FeatureList</p>
</li>
<li>
<p>分期实现小步快跑</p>
</li>
<li>
<p>轮询各个系统负责人，评估对所有系统的潜在影响——最佳实践2</p>
</li>
</ul>
<h3 id="项目启动">项目启动</h3>
<ul>
<li>
<p>以会代训：启动会——最佳实践3</p>
</li>
<li>
<p>约定项目占用资源</p>
</li>
</ul>
<ul>
<li>
<p>列出干系人</p>
<ul>
<li>项目进展每周三周五与干系人分享——最佳实践4</li>
</ul>
</li>
</ul>
<ul>
<li>
<p>Project计划</p>
<ul>
<li>
<p>拉里程碑</p>
</li>
<li>
<p>拆解到以 1～2 人天为单位的子任务——最佳实践5</p>
</li>
</ul>
</li>
<li>
<p>列出前置资源</p>
</li>
</ul>
<h3 id="项目跟催">项目跟催</h3>
<ul>
<li>
<p>延期预先通告</p>
</li>
<li>
<p>需求变更管理</p>
<ul>
<li>
<p>拒绝不紧急不重要需求</p>
</li>
<li>
<p>重要但不紧急需求放在下一次迭代做</p>
</li>
<li>
<p>评估对所有系统潜在影响</p>
</li>
</ul>
</li>
<li>
<p>以会代训，会议纪要作为执行决议</p>
<ul>
<li>
<p>设计评审会</p>
</li>
<li>
<p>跨部门难题推进会——最佳实践6</p>
</li>
</ul>
</li>
</ul>
<h2 id="周报">周报</h2>
<ul>
<li>
<p>周报上先列 timeline——最佳实践7</p>
</li>
<li>
<p>子任务列表，对应的完成百分比</p>
</li>
</ul>
<h2 id="风险预警">风险预警</h2>
<h2 id="紧锣密鼓">紧锣密鼓</h2>
<ul>
<li>
<p>站立晨会——最佳实践8</p>
</li>
<li>
<p>任务看板</p>
</li>
<li>
<p>定期定时项目协调会——最佳实践9</p>
</li>
</ul>
<h2 id="快马加鞭">快马加鞭</h2>
<ul>
<li>
<p>日报</p>
</li>
<li>
<p>工时统计</p>
</li>
<li>
<p>产品研发测试锁定会议室集中办公——最佳实践10</p>
</li>
<li>
<p>周日联调</p>
</li>
<li>
<p>以演示会作为阶段性deadline推动——最佳实践11</p>
</li>
</ul>
<h2 id="测试用例评审会">测试用例评审会</h2>
<h2 id="实施计划">实施计划</h2>
<ul>
<li>
<p>数据迁移</p>
</li>
<li>
<p>项目经理收集整理本项目涉及改动的系统、需重新部署的系统和模块、数据表结构变化列表</p>
</li>
<li>
<p>盯住验收</p>
</li>
<li>
<p>分批实施</p>
</li>
<li>
<p>部署计划和实施方案</p>
</li>
<li>
<p>上线后的问题处理预案——最佳实践12</p>
</li>
</ul>
<h2 id="关键因素">关键因素</h2>
<h3 id="向下关注">向下关注</h3>
<ul>
<li>
<p>三岁宝宝端水的段子</p>
<ul>
<li>发出指令，必须深入了解执行步骤和执行细节</li>
</ul>
</li>
</ul>
<ul>
<li>代入式思考，落实到执行层面</li>
</ul>
<h3 id="导演和制片主任模式">导演和制片主任模式</h3>
<ul>
<li>
<p>了解背景知识</p>
</li>
<li>
<p>给出备选方案</p>
</li>
<li>
<p>跨部门征求要不要这么做，而不是征求怎么做</p>
</li>
</ul>
<h3 id="养成拉list清单的习惯">养成拉List清单的习惯</h3>
<ul>
<li>发现问题</li>
</ul>
<ul>
<li>放大问题或认清问题</li>
</ul>
<h3 id="尊重海恩法则">尊重海恩法则</h3>
<ul>
<li>
<p>每一起严重事故的背后，必然有 29 次轻微事故和 300 起未遂先兆以及 1000 起事故隐患</p>
</li>
<li>
<p>脏数据和投诉背后隐藏着致命真相</p>
</li>
</ul>
<h3 id="不能等死">不能等死</h3>
<hr>
<p>注：原文作者为@郑昀</p>
<p>原文链接：<a href="https://www.cnblogs.com/zhengyun_ustc/p/Amoeba.html">https://www.cnblogs.com/zhengyun_ustc/p/Amoeba.html</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[跳绳，我的日常运动方式]]></title>
        <id>https://Yixiaohan.github.io/post/tiao-sheng-wo-de-ri-chang-yun-dong-fang-shi/</id>
        <link href="https://Yixiaohan.github.io/post/tiao-sheng-wo-de-ri-chang-yun-dong-fang-shi/">
        </link>
        <updated>2024-05-22T07:46:36.000Z</updated>
        <content type="html"><![CDATA[<p>前些天跳绳认识一个新的朋友，一只柴犬，名字叫「伊豆」。<br>
<img src="https://Yixiaohan.github.io/post-images/1716364413871.jpg" alt="" loading="lazy"></p>
<p>再早些年跳绳认识一个小朋友，陪我一起跳绳时间最长的人是来自光明小学一年级二班的迈思辰小盆友，大冬天都乐此不疲。</p>
<p>是小盆友热爱跳绳吗？</p>
<p>不，是因为他家长只让他周末看电视、玩电子产品😂</p>
<figure data-type="image" tabindex="1"><img src="https://Yixiaohan.github.io/post-images/1716364454709.jpg" alt="" loading="lazy"></figure>
<h2 id="我为什么选择跳绳做为我的日常运动方式">我为什么选择跳绳做为我的日常运动方式？</h2>
<p>跳绳基本不挑场地，不挑衣服。并且耗时相对来说少（对比我公路车骑行，去公园跑步）。最主要的跳绳消耗热量挺多的<br>
<img src="https://Yixiaohan.github.io/post-images/1716364253473.png" alt="" loading="lazy"></p>
<h2 id="faq常见问答">FAQ(常见问答)</h2>
<h3 id="跳绳伤害膝盖吗">跳绳伤害膝盖吗？</h3>
<p>有句话是这么说得，「以大多数人的努力程度之低，根本轮不到拼天赋」。<br>
修改一下，「以大多数人的运动量，根本轮不到伤害膝盖」。</p>
<p>所以，选择合适的场地（比如健身房、跳绳垫子），合适的鞋子，标准的跳绳姿势，先坚持跳起来 😃</p>
<h3 id="跳绳场地-时间">跳绳场地、时间</h3>
<p>时间：我个人喜欢晚上跳绳<br>
地点：健身房、家里小区广场、公园等场地，只要不影响他人即可</p>
<h3 id="运动装备设备">运动装备/设备</h3>
<ul>
<li>Loop 智能跳绳(蓝牙APP)</li>
<li>75派 智能跳绳(蓝牙APP)</li>
<li>普通非智能可计数跳绳(可以手动用 Excel 来计数，也可以拍照片建月份打卡相册)</li>
<li>各种智能手环、智能手表</li>
<li>鞋(选择适合自己的)</li>
</ul>
<h3 id="绳子容易磨损怎么办">绳子容易磨损，怎么办?</h3>
<ul>
<li>建议在公司健身房场地跳绳</li>
<li>拼多多搜索「PVC 塑料管」可以在跳绳绳子外面套上 PVC 塑料管，以减少跳绳绳子的磨损。减少钢丝绳的磨损，也可以买点「珠节」套在绳子上</li>
</ul>
<h3 id="歌单-播客-podcast-视频等">歌单、播客 podcast、视频等</h3>
<ul>
<li>播客「疯投圈」<br>
https://www.xiaoyuzhoufm.com/podcast/5e280faf418a84a0461fbd39</li>
</ul>
<blockquote>
<p>《疯投圈》是一档为创业者、投资人、分析师，以及任何对创业、投资有兴趣的人准备的播客节目,每月一期，我们为你深度解剖创投行业新动向。</p>
</blockquote>
<ul>
<li>播客「谐星聊天会」<br>
https://www.xiaoyuzhoufm.com/podcast/5e280fa7418a84a0461f912b</li>
</ul>
<blockquote>
<p>谐星聊天会是一档单口喜剧演员与听众一同线下录制的音频节目,用幽默开解生活中的沉杂琐事!</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[聊聊办公沟通工具，是否考虑把「聊天群」转为「话题群」？]]></title>
        <id>https://Yixiaohan.github.io/post/liao-liao-ban-gong-gou-tong-gong-ju-shi-fou-kao-lu-ba-liao-tian-qun-zhuan-wei-hua-ti-qun/</id>
        <link href="https://Yixiaohan.github.io/post/liao-liao-ban-gong-gou-tong-gong-ju-shi-fou-kao-lu-ba-liao-tian-qun-zhuan-wei-hua-ti-qun/">
        </link>
        <updated>2024-05-20T05:02:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="背景">背景：</h2>
<p>在某公司的时候，发现中间件团队、一线店员反馈群，基本上都是用得飞书的「普通聊天群」，当群人数超过上百人、上千人后沟通效率特别低下。</p>
<p>于是写了一份文档，推动很多「聊天群」转为了「话题群」了，得到很多人的赞赏 😃</p>
<h2 id="什么是话题群">什么是话题群</h2>
<p>飞书的群组分为两种形式，一种是比较常见的那种群聊，另外一种叫做「话题群」。</p>
<p>「话题群」，简单理解为论坛发帖子就行。</p>
<p>##常见使用场景</p>
<ul>
<li>群内<strong>人数不断增多</strong>，且需要围绕<strong>多个话题</strong>分别展开讨论时，使用话题消息形式让沟通和信息更聚焦。</li>
<li>针对问题反馈、活动通知、知识资讯共享、企业文化内宣等场景，使用话题消息形式，打造多主题的交流空间，提升信噪比。</li>
</ul>
<h2 id="话题群可能的好处">话题群可能的好处</h2>
<ol>
<li>可能提问者会在一个聊天框里，尽可能提供比较详细的信息。比如：测试环境还是线上？项目名？报错信息文字版、机器IP、截图信息、链接等等</li>
<li>并且话题群每天没有那么多信息，可能会沉淀下来一些常见的问答</li>
</ol>
<h2 id="话题群效果">话题群效果</h2>
<figure data-type="image" tabindex="1"><img src="https://Yixiaohan.github.io/post-images/1716181666728.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://Yixiaohan.github.io/post-images/1716181680194.png" alt="" loading="lazy"></figure>
<h2 id="旧群-与新群的设置">旧群、与新群的设置：</h2>
<ul>
<li>旧的聊天群，可以直接全体禁言，也可以过渡一段时间后再禁言。不建议删除旧群，可能会有一些聊天记录还有价值。</li>
<li>旧的群也不会解散，个新的话题群.新建然后「聊天群」的群主可以邀请老群的人一键全部加入新群。</li>
</ul>
<h2 id="其他">其他</h2>
<p>飞书「话题群」官方文档：</p>
<ul>
<li><a href="https://www.feishu.cn/hc/zh-CN/articles/630899543442-%E6%99%AE%E9%80%9A%E7%BE%A4%E6%B6%88%E6%81%AF%E5%BD%A2%E5%BC%8F%E5%88%87%E6%8D%A2%E4%B8%BA%E8%AF%9D%E9%A2%98%E5%BD%A2%E5%BC%8F">普通群消息形式切换为话题形式</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Code Review Check List]]></title>
        <id>https://Yixiaohan.github.io/post/wo-de-code-review-qing-dan-lie-biao/</id>
        <link href="https://Yixiaohan.github.io/post/wo-de-code-review-qing-dan-lie-biao/">
        </link>
        <updated>2024-05-16T08:01:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="code-review-check-list">Code Review Check List</h1>
<figure data-type="image" tabindex="1"><img src="https://Yixiaohan.github.io/post-images/1718031656147.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://Yixiaohan.github.io/post-images/1718031661676.png" alt="" loading="lazy"></figure>
<h2 id="面向失败编程">面向失败编程：</h2>
<ul>
<li>幂等是否考虑了？</li>
<li>主从延时考虑了吗？</li>
<li>要考虑各种依赖方出现问题对自己造成的影响，如果有可能可以设计出兜底、降级、限流、隔离方案。</li>
<li>HTTP调用：你考虑到超时、重试、并发了吗？并发考虑（比如并发扣库存资源）</li>
<li>RPC 调用失败的处理？</li>
<li>多次 RPC 调用失败后的处理？比如库存转移，先扣库存，再加库存，2次 RPC。比如盘点损益处理，先盘赢加库存，再盘亏扣库存，2次 RPC。</li>
<li>资源回滚：比如盘点盘亏，先扣销售库存。审核通过后扣实物库存失败。那销售库存回滚了吗？</li>
<li>性能考虑（包括批量操作）</li>
<li>不同进程执行失败考虑了吗？比如先执行 DB、再执行 Redis、再执行 MQ，其中某个进程执行失败考虑了吗？</li>
<li>异步处理好用，但非常容易用错</li>
<li>大多数业务项目都是由同步处理、异步处理和定时任务处理三种模式相辅相成实现的</li>
<li>MQ 消息消费失败后怎么处理？重试多少次？报警？req、res 都存储起来</li>
</ul>
<h2 id="面向离职编程">面向离职编程：</h2>
<ul>
<li>Readme 文档</li>
<li>注释</li>
<li>单元测试</li>
</ul>
<h2 id="资源安全兜底">资源安全兜底：</h2>
<ul>
<li>涉及钱时，必须考虑防刷、限量和防重（比如支付金额、优惠券、红包、发短信、库存）</li>
</ul>
<h2 id="隐私与数据安全">隐私与数据安全：</h2>
<ul>
<li>如何正确保存和传输敏感数据？</li>
<li>权限与访问控制？比如店长、店员、库管、总部运营角色权限是否考虑</li>
<li>SQL 注入</li>
<li>跨站请求伪造攻击（CSRF)</li>
</ul>
<h2 id="软件设计的基本原则">软件设计的基本原则：</h2>
<p>高内聚、低耦合</p>
<h2 id="设计模式的六大原则">设计模式的六大原则：</h2>
<p>单一职责、里氏替换、依赖倒置、接口隔离、迪米特法则、开闭原则</p>
<h2 id="其他推荐书籍">其他：推荐书籍</h2>
<figure data-type="image" tabindex="3"><img src="https://Yixiaohan.github.io/post-images/1715673724639.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>